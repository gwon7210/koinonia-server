// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String   @id @default(uuid())
  gender        String?
  kakaoId       String?  @unique
  birthDate     DateTime?
  phoneNumber   String?  @unique
  accountStatus String   @default("ACTIVE")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  posts     Post[]
  likes     Like[]
  follows   Follow[] @relation("UserFollows")
  followers Follow[] @relation("UserFollowers")
  profile   UserProfile?

  @@map("users")
}

// UserProfile model
model UserProfile {
  userId            String  @id
  selfIntroduction  String?
  mbit              String?
  idealType         String?
  profileImagePath  String?

  // Relations
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Post model
model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]
  
  @@map("posts")
}

// Like model
model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  
  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@map("likes")
}

// Follow model
model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  
  // Relations
  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@map("follows")
}
